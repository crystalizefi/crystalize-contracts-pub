// SPDX-License-Identifier: MIT
/* solhint-disable func-name-mixedcase,contract-name-camelcase,one-contract-per-file */
pragma solidity 0.8.19;

import { Test } from "forge-std/Test.sol";

import { IERC20 } from "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";

import { AsyncSwapper, SwapParams } from "src/swapper/AsyncSwapper.sol";
import { Error } from "src/librairies/Error.sol";

contract AsyncSwapperTest is Test {
    address public constant ZERO_EX_MAINNET = 0xDef1C0ded9bec7F1a1670819833240f027b25EfF;
    address public constant CVX_MAINNET = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;
    address public constant WETH_MAINNET = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

    uint256 public constant SELL_AMOUNT = 119_621_320_376_600_000_000_000;
    uint256 public constant BUY_AMOUNT = 356_292_255_653_182_345_276;

    // data generated off-chain using 0x API
    // solhint-disable max-line-length
    bytes public constant DATA =
        hex"415565b00000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000001954af4d2d99874cf0000000000000000000000000000000000000000000000000131f1a539c7e4a3cdf00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000001954af4d2d99874cf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000143757276650000000000000000000000000000000000000000000000000000000000000000001761dce4c7a1693f1080000000000000000000000000000000000000000000000011a9e8a52fa524243000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000b576491f1e6e5e62f1d8f26062ee822b40b0e0d465b2489b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012556e69737761705633000000000000000000000000000000000000000000000000000000000001f2d26865f81e0ddf800000000000000000000000000000000000000000000000017531ae6cd92618af000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b002710c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000b39f68862c63935ade";

    AsyncSwapper public adapter;

    event Swapped(
        address indexed sellTokenAddress,
        address indexed buyTokenAddress,
        uint256 sellAmount,
        uint256 buyAmount,
        uint256 buyTokenAmountReceived
    );

    function setUp() public {
        string memory endpoint = vm.envString("MAINNET_RPC_URL");
        uint256 forkId = vm.createFork(endpoint, 16_731_638);
        vm.selectFork(forkId);

        adapter = new AsyncSwapper(ZERO_EX_MAINNET);
    }
}

contract Constructor is AsyncSwapperTest {
    function test_RevertIf_AggregatorAddressIsZeroAddress() public {
        vm.expectRevert(Error.ZeroAddress.selector);
        new AsyncSwapper(address(0));
    }
}

contract Swap is AsyncSwapperTest {
    function test_RevertIf_BuyTokenAddressIsZeroAddress() public {
        vm.expectRevert(Error.ZeroAddress.selector);
        adapter.swap(SwapParams(CVX_MAINNET, SELL_AMOUNT, address(0), BUY_AMOUNT, DATA));
    }

    function test_RevertIf_SellTokenAddressIsZeroAddress() public {
        vm.expectRevert(Error.ZeroAddress.selector);
        adapter.swap(SwapParams(address(0), SELL_AMOUNT, WETH_MAINNET, BUY_AMOUNT, DATA));
    }

    function test_RevertIf_SellAmountIsZero() public {
        vm.expectRevert(Error.ZeroAmount.selector);
        adapter.swap(SwapParams(CVX_MAINNET, 0, WETH_MAINNET, BUY_AMOUNT, DATA));
    }

    function test_RevertIf_BuyAmountIsZero() public {
        vm.expectRevert(Error.ZeroAmount.selector);
        adapter.swap(SwapParams(CVX_MAINNET, SELL_AMOUNT, WETH_MAINNET, 0, DATA));
    }

    function test_RevertIf_InsufficientBalance() public {
        vm.mockCall(WETH_MAINNET, abi.encodeWithSelector(IERC20.balanceOf.selector), abi.encode(0));

        vm.expectRevert(abi.encodeWithSelector(Error.InsufficientBalance.selector));
        adapter.swap(SwapParams(CVX_MAINNET, SELL_AMOUNT, WETH_MAINNET, BUY_AMOUNT, DATA));
    }

    function test_SwapAndTransferAsset() public {
        deal(address(CVX_MAINNET), address(adapter), SELL_AMOUNT);

        uint256 balanceBefore = IERC20(WETH_MAINNET).balanceOf(address(adapter));

        adapter.swap(SwapParams(CVX_MAINNET, SELL_AMOUNT, WETH_MAINNET, BUY_AMOUNT, DATA));

        uint256 balanceAfter = IERC20(WETH_MAINNET).balanceOf(address(adapter));
        uint256 balanceDiff = balanceAfter - balanceBefore;

        assertTrue(balanceDiff >= 356_292_255_653_182_345_276);
    }

    function test_EmitSwappedEvent() public {
        deal(address(CVX_MAINNET), address(adapter), SELL_AMOUNT);

        vm.expectEmit(true, true, true, true);
        emit Swapped(CVX_MAINNET, WETH_MAINNET, SELL_AMOUNT, BUY_AMOUNT, 441_298_210_681_499_322_546);

        adapter.swap(SwapParams(CVX_MAINNET, SELL_AMOUNT, WETH_MAINNET, BUY_AMOUNT, DATA));
    }
}
